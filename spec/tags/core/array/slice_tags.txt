fails:Array#slice! with a subclass of Array returns a Array instance with [n, m]
fails:Array#slice! with a subclass of Array returns a Array instance with [-n, m]
fails:Array#slice! with a subclass of Array returns a Array instance with [n..m]
fails:Array#slice! with a subclass of Array returns a Array instance with [n...m]
fails:Array#slice! with a subclass of Array returns a Array instance with [-n..-m]
fails:Array#slice! with a subclass of Array returns a Array instance with [-n...-m]
fails:Array#slice with a subclass of Array returns a Array instance with [n, m]
fails:Array#slice with a subclass of Array returns a Array instance with [-n, m]
fails:Array#slice with a subclass of Array returns a Array instance with [n..m]
fails:Array#slice with a subclass of Array returns a Array instance with [n...m]
fails:Array#slice with a subclass of Array returns a Array instance with [-n..-m]
fails:Array#slice with a subclass of Array returns a Array instance with [-n...-m]
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has endless range and positive steps
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has beginless range and positive steps
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has endless range and negative steps
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has closed range and positive steps
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has closed range and negative steps
fails:Array#slice can be sliced with Enumerator::ArithmeticSequence has inverted closed range and positive steps
